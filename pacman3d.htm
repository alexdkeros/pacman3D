<!-- Pacman 3d -->

</script><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Pacman 3D</title>

<!-- external libraries for matrix calculations and maintenance -->
<script type="text/javascript" src="./sandbox_files/glMatrix-0.9.5.min.js"></script>
<script type="text/javascript" src="./sandbox_files/webgl-utils.js"></script>
<script type="text/javascript" src="./sandbox_files/math.min.js"></script>
<script type="text/javascript" src="./WebGLHelpers.js"></script>
<script type="text/javascript" src="./ObjectClasses.js"></script>


<!---------------------------------------------------------------------------------------------------------->
<!------------------SHADERS--------------------------------------------------------------------------------->
<!---------------------------------------------------------------------------------------------------------->

<!-- Code for the vertex shader-->
<script id="shader-vs" type="x-shader/x-vertex">
//attributes for the vertex shader (different for every thread/core that will execute a copy of this)
    attribute vec3 aVertexPosition;
    attribute vec4 aVertexColor;
    attribute vec2 aTextureCoord;
    attribute vec3 aVertexNormal;
	//ModelView and Projection Matrices
    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;
    uniform mat3 uNMatrix;

	//Variable to be forwarded to the corresponding thread of the fragment shader
    varying vec4 vColor;
    varying vec2 vTextureCoord;
    varying vec3 vTransformedNormal;
    varying vec4 vPosition;

	//main function of the vertex shader
	//this code will be copied to many shader cores/threads and executed with the associated
	//data for every vertex (matrices, color, etc)
    void main(void) {
	
	//Each vertex is multiplied with the ModelView and Projection matrices and created a fragment
        vPosition = uMVMatrix * vec4(aVertexPosition, 1.0);
	    gl_Position = uPMatrix * vPosition;
		//Its color is forwarded to the fragment shader
        vColor = aVertexColor;
        vTextureCoord=aTextureCoord;
        vTransformedNormal = uNMatrix*aVertexNormal;
    }
</script>

<!-- Code for the fragment shader-->
<script id="shader-fs" type="x-shader/x-fragment">
    //necessary code for compatibility
	precision mediump float;

	//Variable coming from the vertex shader
    varying vec4 vColor;
	varying vec2 vTextureCoord;

    varying vec3 vTransformedNormal;
    varying vec4 vPosition;

    uniform bool uUseLighting;

     uniform vec3 uAmbientColor;

    uniform vec3 uPointLightingLocation;
    uniform vec3 uPointLightingColor;

	uniform sampler2D uSampler;

    void main(void) {
    	//gl_FragColor=texture2D(uSampler,vec2(vTextureCoord.s, vTextureCoord.t));
    	
        vec3 lightWeighting;
        if (!uUseLighting) {
            lightWeighting = vec3(1.0, 1.0, 1.0);
        } else {
            vec3 lightDirection = normalize(uPointLightingLocation - vPosition.xyz);

            float directionalLightWeighting = max(dot(normalize(vTransformedNormal), lightDirection), 0.0);
            lightWeighting = uAmbientColor + uPointLightingColor * directionalLightWeighting;
        }

        vec4 fragmentColor;
        fragmentColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));
        
        gl_FragColor = vec4(fragmentColor.rgb * lightWeighting,fragmentColor.a)+vColor;
    }
    	

</script>


<!---------------------------------------------------------------------------------------------------------->
<!-------------MAIN FUNCTIONALITY--------------------------------------------------------------------------->
<!---------------------------------------------------------------------------------------------------------->
<script type="text/javascript">




	/************************************************
	*************************************************
	***** shaderProgram with specified shaders ******
	*************************************************
	*************************************************/

	var shaderProgram;


	//Creates a program from a vertex + fragment shader pair
	function initShaders() {
		//DBG
		//console.log("Initializing shaders");

	    var fragmentShader = getShader(gl, "shader-fs");
	    var vertexShader = getShader(gl, "shader-vs");

	    shaderProgram = gl.createProgram();
	    gl.attachShader(shaderProgram, vertexShader);
	    gl.attachShader(shaderProgram, fragmentShader);
		//link the compiled binaries
	    gl.linkProgram(shaderProgram);

		//check for errors, again
	    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
	        alert("Could not initialise shaders");
	    }

		//activate current program
		//this sandbox has only on shader pair
		//we can have as many as we wish in more complex applications
	    gl.useProgram(shaderProgram);

		//Update attributes for the vertex shader
		//attributes are accessible only from the vertex shader
		//if we want accessible data from a fragment shader we can use uniform variables,
		//or varyings that will be forwarded from the vertex shader to the fragment shader
		
		//Vertex position data
	    shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
	    gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

        //Vertex Normal data
         shaderProgram.vertexNormalAttribute = gl.getAttribLocation(shaderProgram, "aVertexNormal");
        gl.enableVertexAttribArray(shaderProgram.vertexNormalAttribute);


		//Vertex color data
	    shaderProgram.vertexColorAttribute = gl.getAttribLocation(shaderProgram, "aVertexColor");
	    //gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);
	    //Vertex texture data
	    shaderProgram.textureCoordAttribute = gl.getAttribLocation(shaderProgram, "aTextureCoord");
        //gl.enableVertexAttribArray(shaderProgram.textureCoordAttribute);


		//Update uniform variables
		//this variables can be accessed from both the vertex and fragment shader
	    shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
	    shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
        shaderProgram.nMatrixUniform = gl.getUniformLocation(shaderProgram, "uNMatrix");
	    shaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, "uSampler");

        shaderProgram.useLightingUniform = gl.getUniformLocation(shaderProgram, "uUseLighting");
        shaderProgram.ambientColorUniform = gl.getUniformLocation(shaderProgram, "uAmbientColor");
        shaderProgram.pointLightingLocationUniform = gl.getUniformLocation(shaderProgram, "uPointLightingLocation");
        shaderProgram.pointLightingColorUniform = gl.getUniformLocation(shaderProgram, "uPointLightingColor");


	}

	/************************************************
	*************************************************
	********************Buffers**********************
	*************************************************
	*************************************************/
    var W;
    var P;
    var G1;

    var G1x=0.0;
    var G1y=0.0;

	//For every frame this function draws the complete scene from the beginning
    function drawScene() {
	//the viewport gets the canvas values (that were assigned to the gl context variable)
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
		//the frame and depth buffers get cleaned (the depth buffer is used for sorting fragments)
		//without the depth buffer WebGL does not know which fragment is visible for a given pixel
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

		//the projection matrix (pMatrix) is set
		//45 degrees Field-Of-View
		//aspect ratio gl.viewportWidth / gl.viewportHeight
		//near plane: 0.1 , far plane: 100
        mat4.perspective(45, (gl.viewportWidth / gl.viewportHeight), 0.1, 100.0, pMatrix);



        var lighting = document.getElementById("lighting").checked;
        gl.uniform1i(shaderProgram.useLightingUniform, lighting);
        if (lighting) {
            gl.uniform3f(
                shaderProgram.ambientColorUniform,
                parseFloat(document.getElementById("ambientR").value),
                parseFloat(document.getElementById("ambientG").value),
                parseFloat(document.getElementById("ambientB").value)
            );

            gl.uniform3f(
                shaderProgram.pointLightingLocationUniform,
                parseFloat(document.getElementById("lightPositionX").value),
                parseFloat(document.getElementById("lightPositionY").value),
                parseFloat(document.getElementById("lightPositionZ").value)
            );

            gl.uniform3f(
                shaderProgram.pointLightingColorUniform,
                parseFloat(document.getElementById("pointR").value),
                parseFloat(document.getElementById("pointG").value),
                parseFloat(document.getElementById("pointB").value)
            );
        }
		//the modelview Matrix is initialized with the Identity Matrix
        mat4.identity(mvMatrix);
		
		//the ModelView matrix gets a global transformation ("camera" retracts 8 units)
		//otherwise the "camera" will be inside the rotating cube
		//z-axis points out of the screen. we translate -8 which is the inverse transform
		//in essence we move the world -8 units to have the camera 8 units forward.
		//REMEMBER there is no actual camera in WebGL

        
        if (camera==0){
            /*-------------------------------------------overview camera------------------------------------------------------*/
            mat4.translate(mvMatrix, [-5.0, 4.0, -20.0]);
		    mat4.rotate(mvMatrix, degToRad(-45),[1.0, 0, 0.0]);
        }else if (camera==1){
            /*-------------------------------------follow from above camera------------------------------------------------------*/
            mat4.translate(mvMatrix, [-xTrans, -yTrans, -10]);

        }else if (camera==2){
            /*-------------------------------------3rd person camera------------------------------------------------------*/
            mat4.rotate(mvMatrix, degToRad(-90), [1, 0, 0]);
            mat4.rotate(mvMatrix, degToRad(-yaw), [0, 0, 1]);
            mat4.translate(mvMatrix, [-xTrans, -yTrans, -zPos]);
        }

		var trans=[0.0,0.0,0.0];
		var rot={angle:0.0,rotAxis:[0.0, 0.0, 0.0]};
		W.drawWorld();
        if (camera!=2){
		  P.drawObj();
        }
        G1.drawObj();
        }

    function tick() {
        requestAnimFrame(tick);
        handleKeys();
        drawScene();
        animate();
    }

    //Animate function
    function animate(){
        if (camera==2){
            animate3rdPerson();
        }
        //animate Pacman and world
        var ret=[];
        ret=P.animate(W,xTrans,yTrans);
        xTrans=ret[0];
        yTrans=ret[1];

        //animate ghosts
        G1.animate(W);

        checkColission(P,G1);

        

    }

	//Entry point of the WebGL context
	function webGLStart() {
        var canvas = document.getElementById("Pacman3D");
		//Functions for initialization
		//Check above
		initGL(canvas);
        W=new World();
        W.loadWorld("world.txt");
        P=new Pacman();
        P.formObject();
        G1=new Ghost();
        G1.formObject("ghost.png");
        initShaders();
        //Background Color: Color assigned for all pixels with no corresponding fragments
        gl.clearColor(0.0, 0.0, 0.0, 1.0);
		
		//Enable z-buffer for depth sorting
        gl.enable(gl.DEPTH_TEST);

        //define the keyboard handlers
        document.onkeydown = handleKeyDown;
        document.onkeyup = handleKeyUp;
        
		//the first tick of our application
        tick();
    }

//end of Javascript
</script>
</head>
<!---------------------------------------------------------------------------------------------------------->
<!---------HMTL for the canvas element---------------------------------------------------------------------->
<!---------------------------------------------------------------------------------------------------------->
<body onload="webGLStart();"> <!-- calls the entry point of our application -->

    <canvas id="Pacman3D" style="border: none;" width="500" height="500"></canvas>
<br/>

    <input type="checkbox" id="lighting" checked /> Use lighting<br/>
    <br/>

    <h2>Point light:</h2>

    <table style="border: 0; padding: 10px;">
        <tr>
            <td><b>Location:</b>
            <td>X: <input type="text" id="lightPositionX" value="0.0" />
            <td>Y: <input type="text" id="lightPositionY" value="0.0" />
            <td>Z: <input type="text" id="lightPositionZ" value="-5.0" />
        </tr>
        <tr>
            <td><b>Colour:</b>
            <td>R: <input type="text" id="pointR" value="0.8" />
            <td>G: <input type="text" id="pointG" value="0.8" />
            <td>B: <input type="text" id="pointB" value="0.8" />
        </tr>
    </table>

    <h2>Ambient light:</h2>

    <table style="border: 0; padding: 10px;">
        <tr>
            <td><b>Colour:</b>
            <td>R: <input type="text" id="ambientR" value="0.2" />
            <td>G: <input type="text" id="ambientG" value="0.2" />
            <td>B: <input type="text" id="ambientB" value="0.2" />
        </tr>
    </table>

</body></html>