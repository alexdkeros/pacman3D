<!-- Pacman 3d -->

</script><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Pacman 3D</title>

<!-- external libraries for matrix calculations and maintenance -->
<script type="text/javascript" src="./sandbox_files/glMatrix-0.9.5.min.js"></script>
<script type="text/javascript" src="./sandbox_files/webgl-utils.js"></script>
<script type="text/javascript" src="./sandbox_files/math.min.js"></script>
<script type="text/javascript" src="./WebGLHelpers.js"></script>
<script type="text/javascript" src="./ObjectClasses.js"></script>


<!---------------------------------------------------------------------------------------------------------->
<!------------------SHADERS--------------------------------------------------------------------------------->
<!---------------------------------------------------------------------------------------------------------->

<!-- Code for the vertex shader-->
<script id="shader-vs" type="x-shader/x-vertex">
//attributes for the vertex shader (different for every thread/core that will execute a copy of this)
    attribute vec3 aVertexPosition;
    attribute vec4 aVertexColor;
    attribute vec2 aTextureCoord;
	//ModelView and Projection Matrices
    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;

	//Variable to be forwarded to the corresponding thread of the fragment shader
    varying vec4 vColor;
    varying vec2 vTextureCoord;

	//main function of the vertex shader
	//this code will be copied to many shader cores/threads and executed with the associated
	//data for every vertex (matrices, color, etc)
    void main(void) {
	
	//Each vertex is multiplied with the ModelView and Projection matrices and created a fragment
	    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
		//Its color is forwarded to the fragment shader
        vColor = aVertexColor;
        vTextureCoord=aTextureCoord;
    }
</script>

<!-- Code for the fragment shader-->
<script id="shader-fs" type="x-shader/x-fragment">
    //necessary code for compatibility
	precision mediump float;

	//Variable coming from the vertex shader
    varying vec4 vColor;
	varying vec2 vTextureCoord;

	uniform sampler2D uSampler;

    void main(void) {
    	//gl_FragColor=texture2D(uSampler,vec2(vTextureCoord.s, vTextureCoord.t));
    	
	    vec4 textureColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));
        gl_FragColor = vec4(textureColor.rgb, textureColor.a)+vColor;
    	
    }
</script>


<!---------------------------------------------------------------------------------------------------------->
<!-------------MAIN FUNCTIONALITY--------------------------------------------------------------------------->
<!---------------------------------------------------------------------------------------------------------->
<script type="text/javascript">




	/************************************************
	*************************************************
	***** shaderProgram with specified shaders ******
	*************************************************
	*************************************************/

	var shaderProgram;


	//Creates a program from a vertex + fragment shader pair
	function initShaders() {
		//DBG
		console.log("Initializing shaders");

	    var fragmentShader = getShader(gl, "shader-fs");
	    var vertexShader = getShader(gl, "shader-vs");

	    shaderProgram = gl.createProgram();
	    gl.attachShader(shaderProgram, vertexShader);
	    gl.attachShader(shaderProgram, fragmentShader);
		//link the compiled binaries
	    gl.linkProgram(shaderProgram);

		//check for errors, again
	    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
	        alert("Could not initialise shaders");
	    }

		//activate current program
		//this sandbox has only on shader pair
		//we can have as many as we wish in more complex applications
	    gl.useProgram(shaderProgram);

		//Update attributes for the vertex shader
		//attributes are accessible only from the vertex shader
		//if we want accessible data from a fragment shader we can use uniform variables,
		//or varyings that will be forwarded from the vertex shader to the fragment shader
		
		//Vertex position data
	    shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
	    gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

		//Vertex color data
	    shaderProgram.vertexColorAttribute = gl.getAttribLocation(shaderProgram, "aVertexColor");
	    //gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);
	    //Vertex texture data
	    shaderProgram.textureCoordAttribute = gl.getAttribLocation(shaderProgram, "aTextureCoord");
        //gl.enableVertexAttribArray(shaderProgram.textureCoordAttribute);


		//Update uniform variables
		//this variables can be accessed from both the vertex and fragment shader
	    shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
	    shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
	    shaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, "uSampler");

	}

	/************************************************
	*************************************************
	********************Buffers**********************
	*************************************************
	*************************************************/
    var W;

	//Initialize VBOs, IBOs and color
    function initBuffers() {
        
        colors = [
            [1.0, 0.0, 0.0, 1.0], // Front face
            [1.0, 1.0, 0.0, 1.0], // Back face
            [0.0, 1.0, 0.0, 1.0], // Top face
            [1.0, 0.5, 0.5, 1.0], // Bottom face
            [1.0, 0.0, 1.0, 1.0], // Right face
            [0.0, 0.0, 1.0, 1.0]  // Left face
        ];
        var unpackedColors={};
        unpackedColors.vals=[];
        for (var i in colors) {
            var color = colors[i];
            //assign colors for each vertex of each face based on the packed representation above
            for (var j=0; j < 4; j++) {
                unpackedColors.vals = unpackedColors.vals.concat(color);
            }
        }
        //every color has 4 values: red, green, blue and alpha (transparency: use 1.0 (opaque) for this demo)
        unpackedColors.itemSize = 4;
        //24 color values (we have 24 vertices to color...)
        unpackedColors.numItems = 24;

    }







	//For every frame this function draws the complete scene from the beginning
    function drawScene() {
	//the viewport gets the canvas values (that were assigned to the gl context variable)
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
		//the frame and depth buffers get cleaned (the depth buffer is used for sorting fragments)
		//without the depth buffer WebGL does not know which fragment is visible for a given pixel
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

		//the projection matrix (pMatrix) is set
		//45 degrees Field-Of-View
		//aspect ratio gl.viewportWidth / gl.viewportHeight
		//near plane: 0.1 , far plane: 100
        mat4.perspective(45, (gl.viewportWidth / gl.viewportHeight), 0.1, 100.0, pMatrix);

		//the modelview Matrix is initialized with the Identity Matrix
        mat4.identity(mvMatrix);
		
		//the ModelView matrix gets a global transformation ("camera" retracts 8 units)
		//otherwise the "camera" will be inside the rotating cube
		//z-axis points out of the screen. we translate -8 which is the inverse transform
		//in essence we move the world -8 units to have the camera 8 units forward.
		//REMEMBER there is no actual camera in WebGL
		mat4.translate(mvMatrix, [0.0, 0.0, -15.0]);
		mat4.rotate(mvMatrix, degToRad(-45),[1.0, 1.5, 0.0]);

		var trans=[0.0,0.0,0.0];
		var rot={angle:0.0,rotAxis:[0.0, 0.0, 0.0]};
		W.drawWorld();
		}

    function tick() {
        requestAnimFrame(tick);
        drawScene();
    }


	//Entry point of the WebGL context
	function webGLStart() {
        var canvas = document.getElementById("Pacman3D");
		//Functions for initialization
		//Check above
		initGL(canvas);
        W=new World();
        W.loadWorld("world.txt");
        initShaders();
        initBuffers();
		//Background Color: Color assigned for all pixels with no corresponding fragments
        gl.clearColor(0.0, 0.0, 0.0, 1.0);
		
		//Enable z-buffer for depth sorting
        gl.enable(gl.DEPTH_TEST);

		//the first tick of our application
        tick();
    }

//end of Javascript
</script>
</head>
<!---------------------------------------------------------------------------------------------------------->
<!---------HMTL for the canvas element---------------------------------------------------------------------->
<!---------------------------------------------------------------------------------------------------------->
<body onload="webGLStart();"> <!-- calls the entry point of our application -->

    <canvas id="Pacman3D" style="border: none;" width="500" height="500"></canvas>

    <br>

</body></html>